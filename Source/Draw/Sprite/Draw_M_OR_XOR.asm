
                ifndef _DRAW_SPRITE_DRAW_M_OR_XOR_
                define _DRAW_SPRITE_DRAW_M_OR_XOR_
; -----------------------------------------
; отображение спрайта OR & XOR без атрибутов
; In:
;   A'  - хранит при левом клипе -отрицательное смещение, в остальных позиции спрайта по горизонтали в пикселях
;   L'  - высота невидимой части спрайта в пикселях
;   DE  - адрес экрана с учётом переменной GameState.Screen
;   B   - новая высота спрайта видимой/невидимой части спрайта в пикселях (-/+)
;   C   - ширина невидимой части спрайта в знакоместах (-/+)
;   C'  - ширина спрайта в знакоместах
;   DE' - адрес спрайта
; Out:
; Corrupt:
; Note:
; -----------------------------------------
DrawM_OR_XOR    ; корректировка адреса экрана,
                ; т.к. спрайт рисуется в обратном порядке, то к текущему адресу
                ; необходимо прибавить разницу ширины спрайта и невидимой чатси
                LD A, C
                OR A
                JP M, $+5
                NEG
                EXX
                ADD A, C
                EXX
                ADD A, E
                LD E, A

                ; инициализация
                EXX
                DEC C       ; началос с 1
                LD A, C                                                         ; ширины спрайта в знакоместах
                EX AF, AF'
                LD B, A                                                         ; хранит при левом клипе -отрицательное смещение, в остальных позиции спрайта по горизонтали в пикселях

                ; расчёт смещения от начала адреса спрайта
                LD A, (DrawClipped.Flags)
                LD H, A     ; %ddmppppp                                         ; FSpriteData.Page
                LD A, L     ; %000rrrrr
                DEC A       ; началос с 1
                ADD A, A    ; %00rrrrr0
                ADD A, A    ; %0rrrrr00
                OR C        ; %0rrrrrww
                LD C, H     ; %ddmppppp                                         ; значение LD/OR & XOR
                RLA         ; %rrrrrwwx
                RL H        ; %rrrrrwwx : a                                     ; a - флаг атрибута
                RRA         ; %arrrrrww
                LD H, A     ; %arrrrrww

                ; определение необходимости обрезать спрайт сверху
                LD A, L
                OR A
                LD L, H     ; %arrrrrww
                LD H, HIGH Adr.MultiplySprite
                JR Z, .ToCopy

                ; определение размера невидимой части спрайта
                ; -----------------------------------------
                ;      7    6    5    4    3    2    1    0
                ;   +----+----+----+----+----+----+----+----+
                ;   | AR | R4 | R3 | R2 | R1 | R0 | W1 | W0 |
                ;   +----+----+----+----+----+----+----+----+
                ;
                ;   AR      [7]         - флаг, учитывать атрибуты, биты R2..R0 не имеют значения
                ;   R4-R0   [6..2]      - количество строк              (макс 32 строки)
                ;   W1,W0   [1,0]       - ширина спрайта в знакоместах  (1-4 байта)
                ;
                ;   размер таблицы 256 байт
                ; -----------------------------------------
                LD A, (HL)
                ADD A, A                                                        ; ширина спрайта с маской (x2)

                ; приращение смещение к адресу спрайта
                ADD A, E
                LD E, A
                ADC A, D
                SUB E
                LD D, A

.ToCopy         ; расчёт количество копируемых байт во временный буфер
                EXX
                LD A, B     ; %000rrrrr                                         ; новая высота видимой части спрайта в пикселях
                EXX
                DEC A       ; началос с 1
                ADD A, A    ; %00rrrrr0
                ADD A, A    ; %0rrrrr00
                XOR L
                AND %01111100
                XOR L       ; %arrrrrww                                         ; rrrrr - новая высота видимой части спрайта
                LD L, A

                ; определение размера спрайта
                ; -----------------------------------------
                ;      7    6    5    4    3    2    1    0
                ;   +----+----+----+----+----+----+----+----+
                ;   | AR | R4 | R3 | R2 | R1 | R0 | W1 | W0 |
                ;   +----+----+----+----+----+----+----+----+
                ;
                ;   AR      [7]         - флаг, учитывать атрибуты, биты R2..R0 не имеют значения
                ;   R4-R0   [6..2]      - количество строк              (макс 32 строки)
                ;   W1,W0   [1,0]       - ширина спрайта в знакоместах  (1-4 байта)
                ;
                ;   размер таблицы 256 байт
                ; -----------------------------------------
                LD A, (HL)
                ADD A, A                                                        ; ширина спрайта с маской (x2)

               ; -----------------------------------------
                ; копирование спрайта в общий буфер
                ; In:
                ;   DE - адрес спрайта
                ;   A  - количество копируемых байт
                ; Out:
                ;   HL  - адрес спрайта
                ; Corrupt:
                ;   HL, DE, BC, AF
                ; Note:
                ;   максимальный размер спрайта 256 байт
                ; -----------------------------------------
                PUSH BC
                CALL Memcpy.Sprite
                LD (.SpriteAddress), HL
                SET_PAGE_SCREEN_SHADOW                                          ; включение страницы теневого экрана
                POP BC

                EX AF, AF'                                                      ; восстановлени ширины спрайта в знакоместах
                ADD A, A    ; %00000ww0
                LD C, A

                ; если сдвиг, флаг переполнения включен
                LD A, B                                                         ; хранит при левом клипе -отрицательное смещение, в остальных позиции спрайта по горизонтали в пикселях
                AND #07
                ADD A, #FF

                ; -----------------------------------------
                ;      7    6    5    4    3    2    1    0
                ;   +----+----+----+----+----+----+----+----+
                ;   | D1 | D0 | MR | P4 | P3 | P2 | P1 | P0 |
                ;   +----+----+----+----+----+----+----+----+
                ;
                ;   D1,D0   [7,6]       - тип вывода спрайта
                ;                           00 - OR & XOR с сохранением фона
                ;                           01 - OR & XOR
                ;                           10 - LD с атрибутами
                ;                           11 - OR & XOR с атрибутами
                ;   MR      [5]         - флаг, зеркального отображения спрайта по горизонтали
                ;   P4-P0   [4..0]      - страница хранения спрайта (32 страницы)
                ; -----------------------------------------
                LD A, (DrawClipped.Flags)
                RRA     ; %Sddmpppp : p
                RRA     ; %xSddmppp : p
                XOR C
                AND %01111000
                XOR C   ; %0Sddmww0
                LD C, D ; %ddmppppp

                ; добавить смещение к таблице
                ADD A, LOW Function.Table
                LD L, A
                ADC A, HIGH Function.Table
                SUB L
                LD H, A

                ; чтение адреса таблицы переходов
                LD A, (HL)
                INC HL
                LD H, (HL)
                LD L, A

                ; приведение к 16-битному значению
                EXX
                LD A, C
                EXX
                ADD A, A    ; x2
                ADD A, A    ; x4
                LD E, A
                SBC A, A
                LD D, A
                ADD HL, DE                                                      ; смещение по таблице

                ; чтение адреса функции отображения
                LD A, (HL)
                LD IXL, A
                INC HL
                LD A, (HL)
                LD IXH, A
                INC HL

                ; чтение адреса функции отображения следующей строки
                LD A, (HL)
                LD IYL, A
                INC HL
                LD A, (HL)
                LD IYH, A

                ; определение смешения
                LD A, B                                                         ; хранит при левом клипе -отрицательное смещение, в остальных позиции спрайта по горизонтали в пикселях
                AND %00000111

                ; -----------------------------------------
                ; тип вывода спрайта OR & XOR (отражённый спрайт по горизонтали)
                ;   H'  - старший адрес таблицы зеркальных байт
                ;   D'  - старший адрес таблицы сдвига
                ; -----------------------------------------
                LD H, HIGH Adr.ByteMirrorTable                                  ; адреса таблицы зеркальных байт/буфера
                ADD A, A    ; x2
                ADD A, (HIGH Adr.ShiftTable) - 2 + 1                            ; таблица не хранит нулевое смещение
                LD D, A
            
                EXX

                ; защитная от порчи данных с разрешённым прерыванием
                RESTORE_BC
                LD (DrawM_OR_XOR.Exit.ContainerSP), SP

                ; подготовка вывода
                LD L, E
                LD A, #F8
                AND D
                LD H, A
                SUB D
                ADD A, #08
                LD C, B                                                         ; количество оставшихся строк рисования
                LD B, A                                                         ; количество оставшихся строк в знакоместе
.SpriteAddress  EQU $+1
                LD SP, #0000
                JP (IX)                                                         ; отобращение спрайта
DrawM_OR_XOR.Exit
.ContainerSP    EQU $+1
                LD SP, #0000
                RET
                display " - Draw function 'Mirror OR XOR':\t\t\t", /A, DrawM_OR_XOR, "\t= busy [ ", /D, $-DrawM_OR_XOR, " byte(s)  ]"

                endif ; ~ _DRAW_SPRITE_DRAW_M_OR_XOR_
