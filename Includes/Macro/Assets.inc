                ifndef _MACRO_ASSETS_
                define _MACRO_ASSETS_
; -----------------------------------------
; расчёт адреса расположения ресурса
; In:
;   ID? - идентификатор ресурса
; Out:
;   IX  - адрес структуры FAssets
; Corrupt:
; -----------------------------------------
ASSETS_ADR      macro ID?
                LD IX, Adr.AssetsTable | (ID? << 3)
                endm
; -----------------------------------------
; расчёт адреса расположения ресурса
; In:
;   A  - идентификатор ресурса
; Out:
;   IX - адрес структуры FAssets
; Corrupt:
; -----------------------------------------
ASSETS_ADR_A    macro
                LD IXL, A
                LD IXH, HIGH Adr.AssetsTable >> 3
                ADD IX, IX  ; x2
                ADD IX, IX  ; x4
                ADD IX, IX  ; x8
                endm
; -----------------------------------------
; расчёт адреса расположения ресурса
; In:
;   Reg? - регистр в котором хранится идентификатор ресурса
; Out:
;   IX   - адрес структуры FAssets
; Corrupt:
; -----------------------------------------
ASSETS_ADR_REG  macro Reg?
                LD IXL, Reg?
                LD IXH, HIGH Adr.AssetsTable >> 3
                ADD IX, IX  ; x2
                ADD IX, IX  ; x4
                ADD IX, IX  ; x8
                endm
; -----------------------------------------
; перенос драйвера TR-DOS во временный буффер
; In:
; Out:
; Corrupt:
;   HL, DE, BC, AF
; Node:
;   включить страницу (с хранением данных о ресурсах)
; -----------------------------------------
ASSETS_TRDOS    macro
                LD HL, Adr.Stash_TRDOS
                LD DE, Adr.ExtraBuffer
                LD BC, Size.Stash_TRDOS
                CALL Memcpy.FastLDIR
                endm
; -----------------------------------------
; включить страницу расположения ассет менеджера
; In:
; Out:
;   IX - адрес структуры FAssets
; Corrupt:
;   BC, AF
; -----------------------------------------
SET_PAGE_ASSETS macro
                LD A, Page.AssetManager
                SET_PAGE_A
                endm
; -----------------------------------------
; установка загрузки ресурса
; In:
;   ID?      - идентификатор ресурса
;   Page?    - страница расположения ресурса
;   Address? - адрес расположения ресурса
; Out:
;   IX       - адрес структуры FAssets
; Corrupt:
; Node:
;   включить страницу (с хранением данных о ресурсах)
; -----------------------------------------
SET_LOAD_ASSETS macro ID?, Page?, Address?
                ; подготовка к загрузке
                ASSETS_ADR ID?

                ; Page?
                ;
                ;      7    6    5    4    3    2    1    0
                ;   +----+----+----+----+----+----+----+----+
                ;   | 0  | 0  | 0  | A7 | A6 | A5 | A4 | A3 |
                ;   +----+----+----+----+----+----+----+----+
                ;
                ;   A7-A3   [4..0]      - страница памяти 16кб
                ;                         часть адреса хранения битовой маски
                ;   
                ; Address?
                ;
                ;   +----+----+----+----+----+----+----+----+   +----+----+----+----+----+----+----+----+
                ;  | 15 | 14 | 13 | 12 | 11 | 10 |  9 |  8 |   |  7 |  6 |  5 |  4 |  3 |  2 |  1 |  0 |
                ;  +----+----+----+----+----+----+----+----+   +----+----+----+----+----+----+----+----+
                ;  | 1  | 1  | A2 | A1 | A0 | B2 | B1 | B0 |   | X  | X  | X  | X  | X  | X  | X  | X  |
                ;  +----+----+----+----+----+----+----+----+   +----+----+----+----+----+----+----+----+
                ;
                ;   A2-A0   [13..11]    - адрес
                ;                         часть адреса хранения битовой маски
                ;   B2-B0   [10..8]     - адрес
                ;                         номер бита в байте (обратный)

.Page           defl (Page?)
.HighAddress    defl HIGH (Address?)
                if .Page == PAGE_2 || .Page == PAGE_5
.Page           = ASSETS_NOT_SWITCH
                else
.HighAddress    = 0xC0 | .HighAddress
                endif

                ; сохранение линейного адреса размещения ресурса
                LD (IX + FAssets.Address.Page), .Page
                LD (IX + FAssets.Address.Adr.Low), LOW Address?
                LD (IX + FAssets.Address.Adr.High), .HighAddress
                RES ASSETS_ALLOCATION_BIT, (IX + FAssets.Address.Page)          ; сброс флага (не требуется автоматическая аллокация)
                endm
; -----------------------------------------
; установка загрузки ресурса
; In:
;   Reg?     - регистр в котором хранится идентификатор ресурса
;   Page?    - страница расположения ресурса
;   Address? - адрес расположения ресурса
; Out:
;   IX       - адрес структуры FAssets
; Corrupt:
; Node:
;   включить страницу (с хранением данных о ресурсах)
; -----------------------------------------
SET_LOAD_ASSETS_REG macro Reg?, Page?, Address?
                ; подготовка к загрузке
                ASSETS_ADR_REG Reg?

                ; Page?
                ;
                ;      7    6    5    4    3    2    1    0
                ;   +----+----+----+----+----+----+----+----+
                ;   | 0  | 0  | 0  | A7 | A6 | A5 | A4 | A3 |
                ;   +----+----+----+----+----+----+----+----+
                ;
                ;   A7-A3   [4..0]      - страница памяти 16кб
                ;                         часть адреса хранения битовой маски
                ;   
                ; Address?
                ;
                ;   +----+----+----+----+----+----+----+----+   +----+----+----+----+----+----+----+----+
                ;  | 15 | 14 | 13 | 12 | 11 | 10 |  9 |  8 |   |  7 |  6 |  5 |  4 |  3 |  2 |  1 |  0 |
                ;  +----+----+----+----+----+----+----+----+   +----+----+----+----+----+----+----+----+
                ;  | 1  | 1  | A2 | A1 | A0 | B2 | B1 | B0 |   | X  | X  | X  | X  | X  | X  | X  | X  |
                ;  +----+----+----+----+----+----+----+----+   +----+----+----+----+----+----+----+----+
                ;
                ;   A2-A0   [13..11]    - адрес
                ;                         часть адреса хранения битовой маски
                ;   B2-B0   [10..8]     - адрес
                ;                         номер бита в байте (обратный)

.Page           defl (Page?)
.HighAddress    defl HIGH (Address?)
                if .Page == PAGE_2 || .Page == PAGE_5
.Page           = ASSETS_NOT_SWITCH
                else
.HighAddress    = 0xC0 | .HighAddress
                endif

                ; сохранение линейного адреса размещения ресурса
                LD (IX + FAssets.Address.Page), .Page
                LD (IX + FAssets.Address.Adr.Low), LOW Address?
                LD (IX + FAssets.Address.Adr.High), .HighAddress
                RES ASSETS_ALLOCATION_BIT, (IX + FAssets.Address.Page)          ; сброс флага (не требуется автоматическая аллокация)
                endm
; -----------------------------------------
; загрузка ресурса
; In:
;   ID? - идентификатор ресурса
;   IX  - адрес структуры FAssets
; Out:
;   HL - адрес загрузки/распаковки
; Corrupt:
; -----------------------------------------
LOAD_ASSETS     macro ID?
                LD A, ID?
                ; -----------------------------------------
                ; загрузка ресурса
                ; In:
                ;   A  - идентификатор ресурса
                ; Out:
                ;   HL - адрес загруженного ресурса
                ;   IX - адрес структуры FAssets
                ;   флаг переполнения установлен, если не удалось найти необходимого размера непрерывную область ОЗУ
                ;   иначе установлена страница загруженного ресурса, рег. пара HL указывает адрес
                ; Note:
                ;   необходимо включить страницу с данными о доступной ОЗУ
                ; -----------------------------------------
                CALL AssetsManager.Load                                         ; загрузка ресурса
                CALL C, AssetsManager.TryToFree                                 ; попытка освободить память под ресурса, в случае ошибочной загрузки
                DEBUG_BREAK_POINT_C                                             ; ошибка загрузки ресурса
                endm
; -----------------------------------------
; загрузка ресурса
; In:
;   A - идентификатор ресурса
; Out:
;   HL - адрес загрузки/распаковки
; Corrupt:
; -----------------------------------------
LOAD_ASSETS_A   macro
                ; -----------------------------------------
                ; загрузка ресурса
                ; In:
                ;   A  - идентификатор ресурса
                ; Out:
                ;   HL - адрес загруженного ресурса
                ;   IX - адрес структуры FAssets
                ;   флаг переполнения установлен, если не удалось найти необходимого размера непрерывную область ОЗУ
                ;   иначе установлена страница загруженного ресурса, рег. пара HL указывает адрес
                ; Note:
                ;   необходимо включить страницу с данными о доступной ОЗУ
                ; -----------------------------------------
                CALL AssetsManager.Load                                         ; загрузка ресурса
                CALL C, AssetsManager.TryToFree                                 ; попытка освободить память под ресурса, в случае ошибочной загрузки
                DEBUG_BREAK_POINT_C                                             ; ошибка загрузки ресурса
                endm
; -----------------------------------------
; загрузка ресурса
; In:
;   Reg? - регистр в котором хранится идентификатор ресурса
;   IX   - адрес структуры FAssets
; Out:
;   HL   - адрес загрузки/распаковки
; Corrupt:
; -----------------------------------------
LOAD_ASSETS_REG macro Reg?
                LD A, Reg?
                ; -----------------------------------------
                ; загрузка ресурса
                ; In:
                ;   A  - идентификатор ресурса
                ; Out:
                ;   HL - адрес загруженного ресурса
                ;   IX - адрес структуры FAssets
                ;   флаг переполнения установлен, если не удалось найти необходимого размера непрерывную область ОЗУ
                ;   иначе установлена страница загруженного ресурса, рег. пара HL указывает адрес
                ; Note:
                ;   необходимо включить страницу с данными о доступной ОЗУ
                ; -----------------------------------------
                CALL AssetsManager.Load                                         ; загрузка ресурса
                CALL C, AssetsManager.TryToFree                                 ; попытка освободить память под ресурса, в случае ошибочной загрузки
                DEBUG_BREAK_POINT_C                                             ; ошибка загрузки ресурса
                endm
; -----------------------------------------
; освобождение ресурса
; In:
;   A - идентификатор ресурса
; Out:
; Corrupt:
; -----------------------------------------
RELEASE_ASSET_A macro
                CALL AssetsManager.ReleaseAsset
                endm
JP_RELEASE_ASSET_A macro
                JP AssetsManager.ReleaseAsset
                endm
; -----------------------------------------
; загрузка ресурса и запуск
; In:
;   ID? - идентификатор ресурса
;   IX  - адрес структуры FAssets
; Out:
; Corrupt:
; -----------------------------------------
LOAD_EXE_ASSETS macro ID?
                LD A, ID?
                CALL AssetsManager.Load                                         ; загрузка ресурса
                CALL C, AssetsManager.TryToFree                                 ; попытка освободить память под ресурса, в случае ошибочной загрузки
                DEBUG_BREAK_POINT_C                                             ; ошибка загрузки ресурса
                JP (HL)                                                         ; запуск загруженного блока
                endm
; -----------------------------------------
; загрузка ресурса и запуск
; In:
;   AssetID? - идентификатор ресурса
; Out:
; Corrupt:
; -----------------------------------------
EXE_ASSETS_NOT_PARAM macro AssetID?, Func?
                LD HL, .Continue+3
                PUSH HL
                PUSH_PAGE                                                       ; сохранение номера страницы в стеке
                LD HL, Func.PopPage
                PUSH HL
                LD A, Func?
                PUSH AF
                LD A, AssetID?
.Continue       JP Func.ExeAssetCode
                endm
JP_EXE_ASSETS_NOT_PARAM macro AssetID?, Func?
                PUSH_PAGE                                                       ; сохранение номера страницы в стеке
                LD HL, Func.PopPage
                PUSH HL
                LD A, Func?
                PUSH AF
                LD A, AssetID?
.Continue       JP Func.ExeAssetCode
                endm
; -----------------------------------------
; запуск функции ассет
; In:
;   SP+0     - 16-битный аргумент
;   AssetID? - идентификатор ресурса
; Out:
; Corrupt:
; -----------------------------------------
EXE_ASSET_FUNCTION macro AssetID?
                LD HL, .Continue+3
                EX (SP), HL
                PUSH_PAGE                                                       ; сохранение номера страницы в стеке
                PUSH HL
                LD HL, Func.PopPage
                EX (SP), HL
                PUSH HL
                LD A, AssetID?
.Continue       JP Func.ExeAssetCode
                endm
JP_EXE_ASSET_FUNCTION macro AssetID?
                CALL GetPage                                                    ; получение текущей страницы исходника
                LD H, A
                EX (SP), HL
                PUSH HL
                LD HL, Func.PopPage
                EX (SP), HL
                PUSH HL
                LD A, AssetID?
                JP Func.ExeAssetCode
                endm
; -----------------------------------------
; отметить область ОЗУ как занятая
; In:
;   Page?    - страница области
;   Address? - адрес области
;   Size?    - размер области (занимаемой)
; Out:
; Corrupt:
; -----------------------------------------
MARK_RAM        macro Page?, Address?, Size?
                ; -----------------------------------------
                ; отметить занятую область данными в доступной ОЗУ (принудительно)
                ; In:
                ;   HL - адрес расположения бита линейного адреса
                ;   B  - номер бита линейного адреса
                ;   E  - количество блоков по 256 байт
                ; -----------------------------------------
                LD HL, (HIGH Adr.AvailableMem << 8 ) | ((((Page?) << 14) | ((Address?) & 0x3FFF)) >> 11)
                LD B, ((~((((Page?) << 14) | ((Address?) & 0x3FFF)) >> 8)) & 0x07)+1
                LD E, (((Size?) % TRDOS.SECTOR_SIZE > 0) & 0x01) + ((Size?) >> 8)
                CALL AssetsManager.Mark.Force                                   ; отметить область ОЗУ как занятая
                endm
; -----------------------------------------
; сохранение идентификатора последнего загруженного ассета
; In:
; Out:
; Corrupt:
; -----------------------------------------
ASSETS_PUSH     macro
                LD A, (GameState.AssetID)                                       ; идентификатора последнего загруженного ассета
                PUSH AF
                endm
; -----------------------------------------
; восстановление ранее загруженного ассета
; In:
; Out:
; Corrupt:
; -----------------------------------------
ASSETS_POP      macro
                POP AF
                LOAD_ASSETS_A
                endm

                endif ; ~_MACRO_ASSETS_
